"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.checkUserSessions = exports.getAllSessions = exports.deleteSession = exports.setSession = void 0;var _bluebird = _interopRequireDefault(require("bluebird"));
var _redisConfig = require("../../config/redis-config");
var _lodash = _interopRequireDefault(require("lodash"));
var _shortid = _interopRequireDefault(require("shortid"));
var _error = require("../errors/error");
var _moment = _interopRequireDefault(require("moment"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}

/** Creates a session in redis | if another session exists, function deletes old sessions */
var setSession = /*#__PURE__*/function () {var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(userId, token, ip) {var key, payload;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
            key = "ss:".concat(userId, ":").concat(_shortid["default"].generate());
            payload = _lodash["default"].pickBy({
              key: key,
              token: token,
              createdAt: (0, _moment["default"])().unix(),
              ip: ip },
            _lodash["default"].identity);_context.next = 4;return (
              _redisConfig.client.hmsetAsync(key, payload));case 4:return _context.abrupt("return",
            _redisConfig.client.expire(key, 60 * 60 * 2));case 5:case "end":return _context.stop();}}}, _callee);}));return function setSession(_x, _x2, _x3) {return _ref.apply(this, arguments);};}();


/** Delete sessions */exports.setSession = setSession;
var deleteSession = function deleteSession(key) {return _redisConfig.client.delAsync(key);};

/** Get all sessions by user */exports.deleteSession = deleteSession;
var getAllSessions = /*#__PURE__*/function () {var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(userId) {var pattern, sessions;return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:
            pattern = "ss:".concat(userId, ":*");_context2.next = 3;return (
              _redisConfig.client.keysAsync(pattern));case 3:sessions = _context2.sent;return _context2.abrupt("return",
            _bluebird["default"].all(sessions.map(function (key) {return _redisConfig.client.hgetallAsync(key);})));case 5:case "end":return _context2.stop();}}}, _callee2);}));return function getAllSessions(_x4) {return _ref2.apply(this, arguments);};}();


/** Check User sessions */exports.getAllSessions = getAllSessions;
var checkUserSessions = /*#__PURE__*/function () {var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(userId) {var pattern, sessions, num_sessions;return regeneratorRuntime.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:
            pattern = "ss:".concat(userId, ":*");_context3.next = 3;return (
              _redisConfig.client.keysAsync(pattern));case 3:sessions = _context3.sent;
            num_sessions = Object.keys(sessions).length;if (!(

            num_sessions >= 5)) {_context3.next = 11;break;}_context3.t0 =
            _error.MaxSessionsError;_context3.next = 9;return (

              _bluebird["default"].all(sessions.map(function (key) {return _redisConfig.client.hgetallAsync(key);})));case 9:_context3.t1 = _context3.sent;throw new _context3.t0(null, _context3.t1);case 11:return _context3.abrupt("return");case 12:case "end":return _context3.stop();}}}, _callee3);}));return function checkUserSessions(_x5) {return _ref3.apply(this, arguments);};}();exports.checkUserSessions = checkUserSessions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc2VydmljZXMvcmVkaXMtc2VydmljZXMuanMiXSwibmFtZXMiOlsic2V0U2Vzc2lvbiIsInVzZXJJZCIsInRva2VuIiwiaXAiLCJrZXkiLCJzaG9ydGlkIiwiZ2VuZXJhdGUiLCJwYXlsb2FkIiwiXyIsInBpY2tCeSIsImNyZWF0ZWRBdCIsInVuaXgiLCJpZGVudGl0eSIsImNsaWVudCIsImhtc2V0QXN5bmMiLCJleHBpcmUiLCJkZWxldGVTZXNzaW9uIiwiZGVsQXN5bmMiLCJnZXRBbGxTZXNzaW9ucyIsInBhdHRlcm4iLCJrZXlzQXN5bmMiLCJzZXNzaW9ucyIsIl9fUHJvbWlzZV9fIiwiYWxsIiwibWFwIiwiaGdldGFsbEFzeW5jIiwiY2hlY2tVc2VyU2Vzc2lvbnMiLCJudW1fc2Vzc2lvbnMiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiTWF4U2Vzc2lvbnNFcnJvciJdLCJtYXBwaW5ncyI6Im9MQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RDs7QUFFQTtBQUNPLElBQU1BLFVBQVUsZ0dBQUcsaUJBQVFDLE1BQVIsRUFBZ0JDLEtBQWhCLEVBQXVCQyxFQUF2QjtBQUNoQkMsWUFBQUEsR0FEZ0IsZ0JBQ0pILE1BREksY0FDTUksb0JBQVFDLFFBQVIsRUFETjtBQUVoQkMsWUFBQUEsT0FGZ0IsR0FFTkMsbUJBQUVDLE1BQUYsQ0FBUztBQUNyQkwsY0FBQUEsR0FBRyxFQUFIQSxHQURxQjtBQUVyQkYsY0FBQUEsS0FBSyxFQUFMQSxLQUZxQjtBQUdyQlEsY0FBQUEsU0FBUyxFQUFFLDBCQUFTQyxJQUFULEVBSFU7QUFJckJSLGNBQUFBLEVBQUUsRUFBRkEsRUFKcUIsRUFBVDtBQUtiSywrQkFBRUksUUFMVyxDQUZNO0FBUWhCQyxrQ0FBT0MsVUFBUCxDQUFrQlYsR0FBbEIsRUFBdUJHLE9BQXZCLENBUmdCO0FBU2ZNLGdDQUFPRSxNQUFQLENBQWNYLEdBQWQsRUFBbUIsS0FBRyxFQUFILEdBQU0sQ0FBekIsQ0FUZSwwREFBSCxtQkFBVkosVUFBVSx3REFBaEI7OztBQVlQLHNCO0FBQ08sSUFBTWdCLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBRVosR0FBRixVQUFXUyxvQkFBT0ksUUFBUCxDQUFnQmIsR0FBaEIsQ0FBWCxFQUF0Qjs7QUFFUCwrQjtBQUNPLElBQU1jLGNBQWMsaUdBQUcsa0JBQVFqQixNQUFSO0FBQ3BCa0IsWUFBQUEsT0FEb0IsZ0JBQ0psQixNQURJO0FBRUhZLGtDQUFPTyxTQUFQLENBQWlCRCxPQUFqQixDQUZHLFNBRXBCRSxRQUZvQjtBQUduQkMsaUNBQVlDLEdBQVosQ0FBZ0JGLFFBQVEsQ0FBQ0csR0FBVCxDQUFhLFVBQUFwQixHQUFHLFVBQUlTLG9CQUFPWSxZQUFQLENBQW9CckIsR0FBcEIsQ0FBSixFQUFoQixDQUFoQixDQUhtQiw0REFBSCxtQkFBZGMsY0FBYyxnREFBcEI7OztBQU1QLDBCO0FBQ08sSUFBTVEsaUJBQWlCLGlHQUFHLGtCQUFRekIsTUFBUjtBQUN2QmtCLFlBQUFBLE9BRHVCLGdCQUNQbEIsTUFETztBQUVOWSxrQ0FBT08sU0FBUCxDQUFpQkQsT0FBakIsQ0FGTSxTQUV2QkUsUUFGdUI7QUFHdkJNLFlBQUFBLFlBSHVCLEdBR1JDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZUixRQUFaLEVBQXNCUyxNQUhkOztBQUt6QkgsWUFBQUEsWUFBWSxJQUFJLENBTFM7QUFNZkksbUNBTmU7O0FBUWZULG1DQUFZQyxHQUFaLENBQWdCRixRQUFRLENBQUNHLEdBQVQsQ0FBYSxVQUFBcEIsR0FBRyxVQUFJUyxvQkFBT1ksWUFBUCxDQUFvQnJCLEdBQXBCLENBQUosRUFBaEIsQ0FBaEIsQ0FSZSw4REFPckIsSUFQcUIscUhBQUgsbUJBQWpCc0IsaUJBQWlCLGdEQUF2QixDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9fUHJvbWlzZV9fIGZyb20gXCJibHVlYmlyZFwiXG5pbXBvcnQgeyBjbGllbnQgfSBmcm9tIFwiLi4vLi4vY29uZmlnL3JlZGlzLWNvbmZpZ1wiXG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoXCJcbmltcG9ydCBzaG9ydGlkIGZyb20gXCJzaG9ydGlkXCJcbmltcG9ydCB7IE1heFNlc3Npb25zRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzL2Vycm9yXCJcbmltcG9ydCBtb21lbnQgZnJvbSBcIm1vbWVudFwiXG5cbi8qKiBDcmVhdGVzIGEgc2Vzc2lvbiBpbiByZWRpcyB8IGlmIGFub3RoZXIgc2Vzc2lvbiBleGlzdHMsIGZ1bmN0aW9uIGRlbGV0ZXMgb2xkIHNlc3Npb25zICovXG5leHBvcnQgY29uc3Qgc2V0U2Vzc2lvbiA9IGFzeW5jICggdXNlcklkLCB0b2tlbiwgaXAgKSA9PiB7XG4gICAgY29uc3Qga2V5ID0gYHNzOiR7dXNlcklkfToke3Nob3J0aWQuZ2VuZXJhdGUoKX1gO1xuICAgIGNvbnN0IHBheWxvYWQgPSBfLnBpY2tCeSh7XG4gICAgICAgIGtleSxcbiAgICAgICAgdG9rZW4sIFxuICAgICAgICBjcmVhdGVkQXQ6IG1vbWVudCgpLnVuaXgoKSxcbiAgICAgICAgaXAgXG4gICAgfSwgXy5pZGVudGl0eSk7XG4gICAgYXdhaXQgY2xpZW50Lmhtc2V0QXN5bmMoa2V5LCBwYXlsb2FkKTtcbiAgICByZXR1cm4gY2xpZW50LmV4cGlyZShrZXksIDYwKjYwKjIpO1xufVxuXG4vKiogRGVsZXRlIHNlc3Npb25zICovXG5leHBvcnQgY29uc3QgZGVsZXRlU2Vzc2lvbiA9ICgga2V5ICkgPT4gY2xpZW50LmRlbEFzeW5jKGtleSlcblxuLyoqIEdldCBhbGwgc2Vzc2lvbnMgYnkgdXNlciAqL1xuZXhwb3J0IGNvbnN0IGdldEFsbFNlc3Npb25zID0gYXN5bmMgKCB1c2VySWQgKSA9PiB7XG4gICAgY29uc3QgcGF0dGVybiA9IGBzczoke3VzZXJJZH06KmA7XG4gICAgY29uc3Qgc2Vzc2lvbnMgPSBhd2FpdCBjbGllbnQua2V5c0FzeW5jKHBhdHRlcm4pO1xuICAgIHJldHVybiBfX1Byb21pc2VfXy5hbGwoc2Vzc2lvbnMubWFwKGtleSA9PiBjbGllbnQuaGdldGFsbEFzeW5jKGtleSkpKTtcbn1cblxuLyoqIENoZWNrIFVzZXIgc2Vzc2lvbnMgKi9cbmV4cG9ydCBjb25zdCBjaGVja1VzZXJTZXNzaW9ucyA9IGFzeW5jICggdXNlcklkICkgPT4ge1xuICAgIGNvbnN0IHBhdHRlcm4gPSBgc3M6JHt1c2VySWR9OipgO1xuICAgIGNvbnN0IHNlc3Npb25zID0gYXdhaXQgY2xpZW50LmtleXNBc3luYyhwYXR0ZXJuKTtcbiAgICBjb25zdCBudW1fc2Vzc2lvbnMgPSBPYmplY3Qua2V5cyhzZXNzaW9ucykubGVuZ3RoO1xuXG4gICAgaWYgKG51bV9zZXNzaW9ucyA+PSA1KSB7XG4gICAgICAgIHRocm93IG5ldyBNYXhTZXNzaW9uc0Vycm9yKFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGF3YWl0IF9fUHJvbWlzZV9fLmFsbChzZXNzaW9ucy5tYXAoa2V5ID0+IGNsaWVudC5oZ2V0YWxsQXN5bmMoa2V5KSkpXG4gICAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm5cbn0iXX0=